trigger:
  - dev

pool:
  name: "Default"

variables:
  solution: "**/*.sln"
  buildPlatform: "Any CPU"
  buildConfiguration: "Release"

stages:
  - stage: Build
    jobs:
      - job: BuildJob
        steps:
          - task: NuGetToolInstaller@1

          - task: NuGetCommand@2
            inputs:
              restoreSolution: "$(solution)"

          - task: VSBuild@1
            inputs:
              solution: "$(solution)"
              msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=FileSystem /p:publishUrl="$(Build.ArtifactStagingDirectory)/webapp" /p:EnvironmentName=Staging'
              platform: "$(buildPlatform)"
              configuration: "$(buildConfiguration)"

          - task: VSTest@2
            inputs:
              platform: "$(buildPlatform)"
              configuration: "$(buildConfiguration)"

          - script: |
              echo "Vous devriez parler avec [$(Build.RequestedFor)], car il y a des chances que l'erreur ait été introduite par cette personne"
              echo "Last commit author: $(Build.RequestedFor)"
              echo "Last commit email: $(Build.RequestedForEmail)"
              echo "Commit ID: $(Build.SourceVersion)"
            displayName: "Print commit info"
            condition: failed()
          #  condition: false # This task will be skipped, we don't want to blame people, should rather focus on team building.

          - task: ArchiveFiles@2
            inputs:
              rootFolderOrFile: "$(Build.ArtifactStagingDirectory)/webapp"
              includeRootFolder: false
              archiveType: "zip"
              archiveFile: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip"
              replaceExistingArchive: true

          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip"
              ArtifactName: "drop"
              publishLocation: "Container"

  - stage: UpdateDB
    dependsOn: Build
    condition: succeeded('Build')
    jobs:
      - job: Generate_SQL_script
        steps:
          - task: UseDotNet@2
            inputs:
              version: "8.0.x"
            displayName: "Use .NET Core 8.0"

          - task: DotNetCoreCLI@2
            inputs:
              command: "build"
              projects: "$(solution)"
              arguments: "--configuration $(buildConfiguration)"
            displayName: "Build .NET Core project"

          # Database sql script creation
          - task: DotNetCoreCLI@2
            displayName: "Install EF Core tools"
            inputs:
              command: "custom"
              custom: "tool"
              arguments: "install --global dotnet-ef"

          - task: DotNetCoreCLI@2
            displayName: "Generate migration script"
            inputs:
              command: "custom"
              custom: "ef"
              arguments: "migrations script --output $(Build.ArtifactStagingDirectory)/migrate.sql --idempotent --startup-project $(ProjectNameWithDB) " #--context ApplicationDbContext"

          - publish: $(Build.ArtifactStagingDirectory)/migrate.sql
            artifact: db-migrations

          # Retrieve db-migrations artifact
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: "db-migrations"
              targetPath: "$(Pipeline.Workspace)"

          # Update the database
          - task: SqlDacpacDeploymentOnMachineGroup@0
            displayName: "Execute migration script"
            inputs:
              TaskType: "sqlQuery"
              ServerName: sqlinfocg.cegepgranby.qc.ca
              DatabaseName: $(sqlDatabase)
              AuthScheme: sqlServerAuthentication
              SqlUsername: $(sqlUsername)
              SqlPassword: $(sqlPassword)
              SqlFile: "$(Pipeline.Workspace)\\migrate.sql"

  - stage: Deploy
    dependsOn:
      - Build
      - UpdateDB
    condition: and(succeeded('Build'), succeeded('UpdateDB'))
    jobs:
      - job: DeployJob
        steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: "current"
              downloadType: "single"
              artifactName: "drop"
              downloadPath: "$(System.ArtifactsDirectory)"

          - task: ExtractFiles@1
            inputs:
              archiveFilePatterns: "$(System.ArtifactsDirectory)/**/*.zip"
              destinationFolder: "$(System.ArtifactsDirectory)/extracted"
              cleanDestinationFolder: true

          - task: FtpUpload@2
            inputs:
              credentialsOption: "inputs"
              serverUrl: "ftp://sqlinfocg.cegepgranby.qc.ca"
              username: "$(ftpUsername)"
              password: "$(ftpPassword)"
              rootDirectory: "$(System.ArtifactsDirectory)/extracted"
              filePatterns: "**"
              remoteDirectory: "/$(ftpDirectory)"
              clean: false
              preservePaths: true
              trustSSL: true
            displayName: "FTP Upload WebAPI"
